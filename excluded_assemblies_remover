#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 16 14:12:35 2021

@author: mykyta

Description

This script serves to move assemblies that don't pass the filtering criteria
set by users input.

    Example:

        excluded_assemblies_remover.py -i "assemblies dir" -t "table path"
                                        -o "dir where to move assemblies"
                                        --nr_contigs 90 --remove_none_ST yes

        
"""

import os
import shutil
import pandas as pd
import sys
import argparse

    
def main(i_path,o_path,table_path,maximum_contigs, minimum_number_of_bases,
         maximum_number_of_bases, minimum_gc_content, maximum_gc_content,
         remove_none_sero, remove_none_st, organism_name):
    
    if not os.path.isdir(o_path):
        os.mkdir(o_path) 
    
    print("reading file...")

    table = pd.read_excel(table_path,na_filter=False)
    table.convert_dtypes()
    remove_list = []

    """
    Verify each parameter, and exclude if assembly doesn't pass.

    """

    print("verifying assemblies...")

    for i in range(0,len(table)):
        for column_name in ["excluded","Number of contigs",
                            "serotype","ST",
                            "Total assembly length","GC content",
                            "excluded","File_name", "organism_name", "observation"]:
            
            if column_name not in table.columns:
            
                print("no column {}".format(column_name))
                sys.exit()
        
        if table.iloc[i]["Number of contigs"] > maximum_contigs:
            remove_list.append(table.iloc[i]["File_name"])

            table.iat[i,table.columns.get_loc("excluded")] = "yes"

            if table.iloc[i]["observation"] == "":
                table.iat[i,table.columns.get_loc("observation")]  = "high number of contigs"
            
        elif table.iloc[i]["Total assembly length"] > maximum_number_of_bases:
            remove_list.append(table.iloc[i]["File_name"])

            table.iat[i,table.columns.get_loc("excluded")] = "yes"

            if table.iloc[i]["observation"] == "":
                table.iat[i,table.columns.get_loc("observation")]  = "high amount of bp"            
            
        elif table.iloc[i]["Total assembly length"] < minimum_number_of_bases:
            remove_list.append(table.iloc[i]["File_name"])

            table.iat[i,table.columns.get_loc("excluded")] = "yes"

            if table.iloc[i]["observation"] == "":
                table.iat[i,table.columns.get_loc("observation")]  = "low amount of bp" 
            
        elif remove_none_sero == "yes" and table.iloc[i]["serotype"] == "-":
            remove_list.append(table.iloc[i]["File_name"])

            table.iat[i,table.columns.get_loc("excluded")] = "yes"

            if table.iloc[i]["observation"] == "":
                table.iat[i,table.columns.get_loc("observation")]  = "no serotype" 

        elif remove_none_st == "yes" and table.iloc[i]["ST"] == "-":
            remove_list.append(table.iloc[i]["File_name"])

            table.iat[i,table.columns.get_loc("excluded")] = "yes"

            if table.iloc[i]["observation"] == "":
                table.iat[i,table.columns.get_loc("observation")]  = "no ST" 

        elif organism_name != "":
            if organism_name != table.iloc[i]["organism_name"]:
                remove_list.append(table.iloc[i]["File_name"])

                table.iat[i,table.columns.get_loc("excluded")] = "yes"

                if table.iloc[i]["observation"] == "":
                    table.iat[i,table.columns.get_loc("observation")]  = "different organism" 
            
        elif float(table.iloc[i]["GC content"]) > maximum_gc_content:
            remove_list.append(table.iloc[i]["File_name"])

            table.iat[i,table.columns.get_loc("excluded")] = "yes"

            if table.iloc[i]["observation"] == "":
                table.iat[i,table.columns.get_loc("observation")]  = "high gc content" 
        
        elif float(table.iloc[i]["GC content"]) < minimum_gc_content:
            remove_list.append(table.iloc[i]["File_name"])

            table.iat[i,table.columns.get_loc("excluded")] = "yes"

            if table.iloc[i]["observation"] == "":
                table.iat[i,table.columns.get_loc("observation")]  = "low gc content" 

        elif table.iloc[i]["excluded"] == "yes":
            remove_list.append(table.iloc[i]["File_name"])

            table.iat[i,table.columns.get_loc("excluded")] = "yes"

            if table.iloc[i]["observation"] == "":
                table.iat[i,table.columns.get_loc("observation")]  = "other reason" 
            

    print("moving assemblies...")

    for assembly in remove_list:
        if os.path.exists(os.path.join(i_path,assembly)):
            shutil.move(os.path.join(i_path,assembly),o_path)

    """
    write the name of file that were excluded from assemblies folder.
    
    """

    print("writing updated report...")

    table.to_excel(os.path.join(o_path,"assemblies_removed_file.xlsx"), index = False)

        
def parse_arguments():

    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('-i', type=str, required=True,
                        dest='i_path',
                        help='folder with assemblies')

    parser.add_argument('-o', type=str, required=True,
                        dest='o_path',
                        help='folder where to move excluded assemblies')
    
    parser.add_argument('-t', type=str, required=True,
                        dest='table_path',
                        help='excel table with statistics')
    
    parser.add_argument('--nr_contigs', type=int, required=False, 
                        dest='maximum_contigs',
                        default=999999, 
                        help='Number of contigs allowed for each assembly.')

    parser.add_argument('--min_bps', type=int, required=False, 
                        dest='minimum_number_of_bases',
                        default=1, 
                        help='Minimum number of total bases accepted for a genome/assembly.')

    parser.add_argument('--max_bps', type=int, required=False, 
                        dest='maximum_number_of_bases',
                        default=9999999999999999, 
                        help='Maximum number of total bases accepted for a genome/assembly.')

    parser.add_argument('--min_gc', type=float, required=False, 
                        dest='minimum_gc_content',
                        default=0.0, 
                        help='Minimum GC content value.')

    parser.add_argument('--max_gc', type=float, required=False, 
                        dest='maximum_gc_content',
                        default=1.0, 
                        help='Minimum GC content value.')
    
    parser.add_argument('--remove_none_sero', type=str, required=False, 
                        dest='remove_none_sero',
                        default="no", 
                        help='Maintain("no") or remove("yes") assemblies with absent emmtype ')
    
    parser.add_argument('--remove_none_st', type=str, required=False, 
                        dest='remove_none_st',
                        default="no", 
                        help='Maintain("no") or remove("yes") assemblies with absent ST')

    parser.add_argument('--specie', type=str, required=False, 
                        dest='organism_name',
                        default="", 
                        help='specie name as in mlst report')

    args = parser.parse_args()

    return args


if __name__ == '__main__':

    args = parse_arguments()

    main(**vars(args))
    
    
        